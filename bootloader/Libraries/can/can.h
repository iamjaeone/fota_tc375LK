#ifndef CAN_H_
#define CAN_H_

/*********************************************************************************************************************/
/*----------------------------------------------------Includes-------------------------------------------------------*/
/*********************************************************************************************************************/


#include "Ifx_Types.h"
/*********************************************************************************************************************/
/*------------------------------------------------Type Definition----------------------------------------------------*/
/*********************************************************************************************************************/

typedef enum {
    BD_NOUSE = 0,
    BD_500K = 1,
    BD_1M = 2
} CAN_BAUDRATES;

typedef enum {
    CAN_NODE0 = 0, /* CAN Node 0 for lite kit */
    CAN_NODE2 = 2  /* CAN Node 2 for mikrobus */
} CAN_NODE;


typedef struct
{
    uint16 id;
    uint8 dlc;
    uint8 data[8];
} CanMessage;



/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/


extern CanMessage g_can_rxBuffer[];
extern uint32 g_can_rxBufferHead;
extern uint32 g_can_rxBufferTail;


/*********************************************************************************************************************/
/*-----------------------------------------------Function Prototypes-------------------------------------------------*/
/*********************************************************************************************************************/

void Can_Init(CAN_BAUDRATES ls_baudrate, CAN_NODE CAN_Node);
void Can_SetFilterRange(uint32 start, uint32 end);

void Can_SendMsg(const CanMessage *msg);
void Can_HandleMessage(void);

#endif /* CAN_H_ */
